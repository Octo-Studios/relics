buildscript {
    repositories {
        mavenCentral()

        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'io.freefair.gradle:lombok-plugin:6.6'
        classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "io.freefair.lombok"
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'

version = '1.18.2-0.6.2.4'
group = 'it.hurts.sskirillss'
archivesBaseName = 'relics'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

mixin {
    add sourceSets.main, "relics.refmap.json"
}

minecraft {
    mappings channel: 'parchment', version: '2022.07.17-1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=relics.mixins.json"
            mods {
                relics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=relics.mixins.json"
            mods {
                relics {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"

    implementation 'org.jetbrains:annotations:20.1.0'

    minecraft 'net.minecraftforge:forge:1.18.2-40.1.68'

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.7.0")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.7.0:api")

    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:9.5.5.174")
    compileOnly fg.deobf("mezz.jei:jei-1.18.2:9.5.5.174:api")

    if (file("libs").isDirectory()) {
        file("libs").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")

            if (file.name != "desktop.ini") {
                println file.name

                def modartifact = file.name.substring(0, splitPos)
                def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
                def modreference = "lib:$modartifact:$modversion"

                dependencies {
                    implementation fg.deobf(project.dependencies.create(modreference) {
                        transitive = false
                    })
                }
            }
        }
    } else file("libs").mkdir()
}

jar {
    manifest {
        attributes([
                "MixinConfigs"            : "relics.mixins.json",
                "Specification-Title"     : "relics",
                "Specification-Vendor"    : "SSKirillSS",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "SSKirillSS",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}